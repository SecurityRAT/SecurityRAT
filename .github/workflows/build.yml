name: CI Build

on: push
env:
  APP_NAME: securityrat
jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      tag: ${{ steps.refname.outputs.tag }} # create an output variable for the release tag
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          architecture: x64
          cache: 'maven'
      - name:  Build application with maven
        run: |
          mvn --version
          mvn clean
          mvn -Pprod verify
      - name: Create and copy application archive
        run: |
          mv securityrat-backend/target/*.jar securityrat-backend/target/securityrat.jar
          chmod +x .ci_scripts/create_archive.sh
          ./.ci_scripts/create_archive.sh
          mkdir staging && cp securityrat-backend/target/$APP_NAME.tar.gz staging
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.APP_NAME }}
          path: staging/${{ env.APP_NAME }}.tar.gz
          if-no-files-found: error
          retention-days: 1
      - name: get ref name
        id: refname
        run: |
          echo "tag=${GITHUB_REF#refs/*/}" >> "$GITHUB_OUTPUT"
  build-and-upload-snapshot-docker-image:
    needs: build
    runs-on: ubuntu-22.04
    env:
      DOCKER_REPO: securityrat/securityrat
      DOCKER_TAG: snapshot
      RELEASE_VERSION: ${{ needs.build.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}
          path: .docker/app
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.HUB_USERNAME }}
          password: ${{ secrets.HUB_ACCESS_TOKEN }}
      - name: Build and push snapshot image
        uses: docker/build-push-action@v5
        with:
          context: .docker/app
          push: true
          tags: ${{ env.DOCKER_REPO }}:${{ env.DOCKER_TAG }}
      - name: Check release version
        run: echo $RELEASE_VERSION
      - name: Build and push image for releases
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v5
        with:
          context: .docker/app
          push: true
          tags: ${{ env.DOCKER_REPO }}:latest, ${{ env.DOCKER_REPO }}:${{ env.RELEASE_VERSION }}

  create-release:
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}
      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.APP_NAME }}.tar.gz
          bodyFile: "release.md"
          token: ${{ secrets.GITHUB_TOKEN }}
