name: CI Build

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APP_NAME: securityrat
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name:  Build application with maven
        run: |
          mvn clean
          mvn -Pprod verify
      - name: Create and copy application archive
        run: |
          mv securityrat-backend/target/*.jar securityrat-backend/target/securityrat.jar
          chmod +x .ci_scripts/create_archive.sh
          ./.ci_scripts/create_archive.sh
          mkdir staging && cp securityrat-backend/target/$APP_NAME.tar.gz staging
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.APP_NAME }}
          path: staging/${{ env.APP_NAME }}.tar.gz
          if-no-files-found: error
          retention-days: 5
  build-and-upload-snapshot-docker-image:
    needs: build
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO: securityrat/securityrat
      DOCKER_TAG: snapshot
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}
          path: .docker/app
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.HUB_USERNAME }}
          password: ${{ secrets.HUB_ACCESS_TOKEN }}
      - name: Building and push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .docker/app
          push: true
          tags: ${{ env.DOCKER_REPO }}:${{ env.DOCKER_TAG }}
#      - name: Publishing SNAPSHOT docker image
#        if: github.ref == 'refs/heads/master'
#        env:
#          HUB_USERNAME: ${{ secrets.HUB_USERNAME }}
#          HUB_ACCESS_TOKEN: ${{ secrets.HUB_ACCESS_TOKEN }}
#        run: |
#          docker login -u "$HUB_USERNAME" -p "$HUB_ACCESS_TOKEN"
#          docker push $DOCKER_REPO:$DOCKER_TAG
#      - name: Set release version
#        id: vars
#        if: startsWith(github.ref, 'refs/tags/v1.')
#        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
#      - name: Create release
#        if: startsWith(github.ref, 'refs/tags/v1.')
#        uses: ncipollo/release-action@v1
#        with:
#          artifacts: "securityrat-backend/target/*.tar.gz"
#          bodyFile: "release.md"
#          token: ${{ secrets.GITHUB_TOKEN }}
#      - name: Publishing docker image
#        if: startsWith(github.ref, 'refs/tags/v1.')
#        env:
#          HUB_USERNAME: ${{ secrets.HUB_USERNAME }}
#          HUB_ACCESS_TOKEN: ${{ secrets.HUB_ACCESS_TOKEN }}
#          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
#        run: |
#          docker login -u "$HUB_USERNAME" -p "$HUB_ACCESS_TOKEN"
#          docker tag $DOCKER_REPO:$DOCKER_TAG $DOCKER_REPO:latest
#          docker tag $DOCKER_REPO:$DOCKER_TAG $DOCKER_REPO:$RELEASE_VERSION
#          docker push $DOCKER_REPO:$RELEASE_VERSION
#          docker push $DOCKER_REPO:latest
